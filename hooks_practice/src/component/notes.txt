An action payload reducer is a function in a Redux application that takes two arguments: 
the current state of the application and an action object. 
The reducer processes the action object and returns a new state of the application.

The action object typically contains a type property that describes the type of action being performed, 
and a payload property that contains the data necessary to perform the action.

The reducer function uses a switch statement to determine how to handle the action based on its type, 
and updates the state of the application accordingly. It then returns the new state.

The reducer handles two actions: ADD_ITEM and REMOVE_ITEM. 
When the add action is dispatched, it adds the payload to the state array. 
When the remove action is dispatched, it filters the state array to remove the payload.
If any other action is dispatched, the reducer simply returns the current state.

In the reducer function, item !== action.payload is a condition that checks 
if an item in the state array is not equal to the payload value of the action being dispatched.

It is used in the remove case of the switch statement to filter out the item to be removed from the state array. 
The filter() method creates a new array with all elements that pass the test implemented by the provided function. 
In this case, the function tests if the current item is not equal to the payload value of the remove action.
So, when the remove action is dispatched with an item value as the payload, 
the itemReducer function returns a new state array that excludes the item with the value equal to the payload value. 
This is achieved by using the filter() method and checking that the item in the state array is not equal to the payload value.


useMemo is a React hook that memoizes the result of a function call 
and only recomputes the result when one of the dependencies has changed. 
It is used to optimize performance by preventing unnecessary re-renders of components.

Here's how it works:

useMemo takes two arguments: a function that returns a value, and an array of dependencies.

The function is called with the current props and state, and its result is memoized.

If any of the dependencies change (as determined by shallow comparison), 
useMemo will call the function again and re-memoize the result.

The memoized result is returned by useMemo.


We're creating a new context called MenuContext, 
which will hold an array of menu items. We're initializing the context with an empty array.

Then, in your parent component, define the list of menu items and 
wrap your child components with the MenuContext.Provider, passing the list of menu items as the value

In your child component, import the MenuContext and use the useContext hook to access the list of menu items

So basically the menuItems array is passed to the MenuContext.Provider in the parent component, 
and then accessed in the ChildComponent using the useContext hook. 
The map function is used to render each menu item as an li element.